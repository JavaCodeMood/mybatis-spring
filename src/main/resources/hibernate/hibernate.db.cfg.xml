<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<description>预处理库DB配置</description>

	<!-- 01预处理库 -->
	<bean id="demo_dataSource" parent="parent_dataSource">
		<property name="username" value="geocoding"></property>
		<property name="password" value="geocoding"></property>  
	</bean>
	
	<bean id="demo_sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="demo_dataSource" />
		<property name="configLocations">
			<list>
				<value>classpath*:hibernate/hibernate.cfg.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props> 
				<prop key="hibernate.default_schema">geocoding</prop> 
			</props>
		</property> 
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath*:lt/mybatis/entity/</value> 
			</list>
		</property>
	</bean>
	
	<bean id="demo_transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager" > 
		<property name="sessionFactory" ref="demo_sessionFactory" /> 
	</bean>
	 
	<tx:advice id="demo_txAdvice"  transaction-manager="demo_transactionManager" >
		<tx:attributes>
			<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
			<tx:method name="*" propagation="REQUIRED" read-only="true" /> 
            <tx:method name="get*" read-only="true" /> 
            <tx:method name="select*" read-only="true" /> 
			<!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED"  />
			<tx:method name="update*" propagation="REQUIRED"  />
			<tx:method name="merge*" propagation="REQUIRED" /> 
            <tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="clear*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->		
	<!-- 设置pointCut表示哪些方法要加入事务处理 -->
	<!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，
	此时如果在执行了一个步骤之后抛出异常,就会导致数据不完整，
	所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
	<!-- 通过advisor来确定具体要加入事务控制的方法 --> 
	<aop:config >
		<aop:pointcut id="lt.mybatis.service_methods" expression="execution(* lt.mybatis.service.*.*(..))" /> 
		<aop:advisor advice-ref="demo_txAdvice" pointcut-ref="lt.mybatis.service_methods"/> 
	</aop:config> 
	
</beans>